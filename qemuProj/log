Added Febrary 1st, 2025:

TODO:
[x] Get qemu building 
[ ] Get win64 image loading/running/accessible via remote desktop
[ ] Add generic qemu PCI device to image
[ ] Establish logging for qemu device
[ ] Add basic windows kernel driver
[ ] Attach kernel driver to qemu device
[ ] Communicate kernel driver -> qemu device, via I/O
[ ] Add windows user-mode driver
[ ] Connect to and use user-mode driver
[ ] Connect user-mode and kernel driver
[ ] Establish user to device interactions

Other possibilities?
[ ] Python library
[ ] Debugging tools (symbol production, link source)
[ ] VM Infrastructure/management tools


For building qemu, I had some helpful resources. It really is just simpler to only use ubuntu to build/launch the source.  

Initial build notes:
- Download the qemu source on whatever OS you're compiling it on - cloning the repo in windows will screw with the venv loading in ubuntu
- Ran into issues with my windows desktop running ubuntu 24.04.1 in VMWare, went with 24.10.  24.04.1 works on my laptop *shrug* 
- Ubuntu VM will need a bunch of resources
- Handy bunch of libraries, some (all?) are required
(sudo) apt-get install build-essential meson ninja-build pkg-config \
    diffutils \
    python3 python3-venv  \
    libglib2.0-dev libusb-1.0-0-dev libncursesw5-dev \
    libpixman-1-dev libepoxy-dev libv4l-dev libpng-dev \
    libsdl2-dev libsdl2-image-dev libgtk-3-dev libgdk-pixbuf2.0-dev \
    libasound2-dev libpulse-dev \
    libx11-dev
- Building takes a long time

I'm using a PDF detailing the steps to compile and add device for qemu windows instance.  It's an ebook written by Apriorit Inc. called "How to Develop Embedded Software Using the QEMU Machine Emulator".  Not including it here since it looks copyright-y.
The book assumes a stable qemu branch, ubuntu OS for build/launching qemu. Guest OS is windows 10 x64. 
Qemu configuration details start on page 28 for my PDF. Here's the short versions of the commands:
./configure \
--target-list=x86_64-softmmu \
--enable-sdl \
--enable-debug \
--extra-ldflags="`pkg-config --libs openssl`"
make

Important notes: 
- Use the curly apostrophe for ldflgs args (non-shift tilda key)

You'll have to create a qemu windows image.  Use qemu-img (in the build folder) to create an image of appropriate size. 

qemu-img create -f qcow2 windowsDev.img 50G

Then, start your first qemu-system-x86_64 with the windows 10 bootable ISO (google), add argument as -cdrom /<path>/WindowsImage.iso

./build/qemu-system-x86_64 \
 -enable-kvm \ # Intel virtualization (or CPU equivalent?) must be enabled in VM settings
 -m 4G \ 
 -cpu host \
 -smp cpus=4,cores=4,threads=1,sockets=1 \
 -hda /<path>/windows10.x64.img \
 -net nic -net user \ # Needed to remove the -net user \
 -snapshot


* The below notes are old news, kept in case I try again to use Windows to build another Windows instance. I think it's possible, but almost all documentation is tailored towards ubuntu, translating it is beyond my knowledge.  Have seen some recent comments say it isn't possible. *

- Enable windows HyperVisor to use whpx

https://superuser.com/questions/1707218/why-qemu-cant-detect-a-whpx-hyper-v-accelerator
https://github.com/xqemu/xqemu/issues/112

B. Quick note, but no details: https://www.qemu.org/docs/master/about/build-platforms.html#windows

C. More details, using msys2: https://wiki.qemu.org/Hosts/W32#Native_builds_with_MSYS2

D. For above, some corrections based on random googling:
- Instead of opening ucrt64.exe after package installations, open MSYS2 mingw_64 in administrator
- I may or may not have had to add the following two lines:
pacman -S mingw-w64-x86_64-python3 
pacman -S mingw-w64-x86_64-meson




